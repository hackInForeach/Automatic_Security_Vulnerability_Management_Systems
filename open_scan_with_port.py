import tkinter as tk
from tkinter import scrolledtext, messagebox, ttk
import os
class FlatButton(tk.Button):
    def __init__(self, parent, text, command=None, **kwargs):
        super().__init__(parent, text=text, command=command, bg='#0066cc', fg='#ffffff',
                         font=("Arial", 14, "bold"), relief=tk.FLAT, **kwargs)

class FlatLoadingBar(tk.Canvas):
    def __init__(self, parent, x, y, width, height, color='#0066cc', background_color='#2e2e2e'):
        super().__init__(parent, width=width, height=height, bg=background_color, highlightthickness=0)
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.color = color
        self.background_color = background_color
        self.bar = None
        self.running = False
        self.progress = 0
        self.create_rectangle(self.x, self.y, self.width, self.height, outline='#004d99', width=2)

    def start(self):
        if not self.running:
            self.running = True
            self.progress = 0
            self.animate()

    def stop(self):
        self.running = False
        self.delete(self.bar)
        self.create_rectangle(self.x, self.y, self.width, self.height, fill=self.color, outline=self.color)

    def animate(self):
        if self.running:
            self.delete(self.bar)
            self.progress = (self.progress + 5) % (self.width + 10)
            self.bar = self.create_rectangle(self.x, self.y, self.x + self.progress, self.y + self.height,
                                             fill=self.color, outline=self.color)
            self.update()
            self.after(50, self.animate)

class App:
    def __init__(self, root):
        self.root = root
        self.root.title("Automatic Security Vulnerability Management Systems")
        self.root.geometry("1300x700")
        self.root.configure(bg="#2e2e2e")

        self.create_widgets()
        self.initialize_log_button()

    def create_widgets(self):
        title_label = tk.Label(self.root, text="Automatic Security Vulnerability Management Systems",
                               font=("Arial", 24, "bold"), fg="#00BFFF", bg="#2e2e2e")
        title_label.pack(pady=20)

        left_panel = tk.Frame(self.root, bg="#1e1e1e", width=300)
        left_panel.pack(side=tk.LEFT, fill=tk.Y)

        self.start_button = FlatButton(left_panel, text="İşlemi Başlat")
        self.start_button.pack(pady=20, padx=10, fill=tk.X)

        self.log_button = FlatButton(left_panel, text="Logları Gör")
        self.log_button.pack(pady=10, padx=10, fill=tk.X)

        exit_button = FlatButton(left_panel, text="Çıkış")
        exit_button.pack(pady=10, padx=10, fill=tk.X)

        right_panel = tk.Frame(self.root, bg="#1e1e1e")
        right_panel.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)

        self.log_output = scrolledtext.ScrolledText(right_panel, width=80, height=25, wrap=tk.WORD,
                                                    bg="#1e1e1e", fg="#B0B0B0", insertbackground='white',
                                                    font=("Courier", 12))
        self.log_output.pack(padx=20, pady=20, fill=tk.BOTH, expand=True)

        self.loading_animation = FlatLoadingBar(right_panel, 15, 15, 800, 30, color='#0066cc',
                                                background_color='#1e1e1e')
        self.loading_animation.pack(pady=20)
        self.loading_animation.start()

    def initialize_log_button(self):
        self.log_button.config(state=tk.DISABLED)
        self.root.after(1, lambda: self.log_button.config(state=tk.NORMAL))

    def open_log_file(self):
        log_files = [f for f in os.listdir('log') if f.endswith('.log')]
        log_files.sort()

        if not log_files:
            messagebox.showinfo("Bilgi", "Açılacak log dosyası bulunamadı.")
            return

        log_frame = tk.Toplevel(self.root)
        log_frame.title("Log Dosyaları")
        log_frame.geometry("600x400")
        log_frame.configure(bg="#2e2e2e")

        combo_box = ttk.Combobox(log_frame, values=log_files, state="readonly")
        combo_box.set(log_files[0])
        combo_box.pack(pady=20, padx=20, fill=tk.X)

        log_content = scrolledtext.ScrolledText(log_frame, width=80, height=20, wrap=tk.WORD,
                                                bg="#1e1e1e", fg="#B0B0B0", insertbackground='white',
                                                font=("Courier", 12))
        log_content.pack(pady=20, padx=20, fill=tk.BOTH, expand=True)
        log_content.config(state=tk.DISABLED)

        def on_log_file_selected(event):
            file_name = combo_box.get()
            with open(os.path.join('log', file_name), 'r', encoding='utf-8') as file:
                content = file.read()
            log_content.config(state=tk.NORMAL)
            log_content.delete(1.0, tk.END)
            log_content.insert(tk.END, content)
            log_content.config(state=tk.DISABLED)

        combo_box.bind("<<ComboboxSelected>>", on_log_file_selected)
        on_log_file_selected(None)

    def confirm_exit(self):
        if self.start_button.cget("state") == tk.DISABLED:
            response = messagebox.askyesno("Çıkış", "İşlem devam etmekte. Yine de çıkmak istiyor musunuz?")
            if response:
                self.root.quit()
        elif self.start_button.cget("state") == tk.NORMAL:
            response = messagebox.askyesno("Çıkış", "Hiçbir işlem bulunmamakta. Çıkmak istediğinizden emin misiniz?")
            if response:
                self.root.quit()
        else:
            response = messagebox.askyesno("Çıkış", "İşlem sonuçlandı. Log dosyalarınızı kontrol ettiniz mi?")
            if response:
                self.root.quit()

    def start_process(self):
        # Burada işlemi başlatacak fonksiyonun kodu olmalı.
        pass

# GUI başlat
root = tk.Tk()
app = App(root)
root.mainloop()
