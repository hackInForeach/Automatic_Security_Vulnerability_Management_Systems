# Bu kod, GitHub kullanıcısı hackInForeach tarafından oluşturulmuştur.
# GitHub: https://github.com/hackInForeach

import logging  # uygulama günlüklerini (log) yönetmek için kullanılır.
import time  #  zaman ile ilgili işlemleri yönetmek için kullanılır (örneğin, uyku süreleri).
import tkinter as tk  # Tkinter, Python'un standart GUI (grafik kullanıcı arayüzü) kütüphanesidir. Tkinter kullanarak pencere, düğme ve diğer GUI bileşenleri oluşturulur.
from tkinter import scrolledtext, messagebox, ttk  # Tkinter'ın alt modülleri: scrolledtext, metin alanları için kaydırılabilir bileşen sağlar; messagebox, kullanıcıya bilgi kutuları sunar; ttk, gelişmiş GUI bileşenleri sağlar.
from threading import Thread  #  çok iş parçacıklı (thread) işlemleri yönetmek için kullanılır. Bu, uzun süreli işlemleri GUI'yi dondurmadan arka planda çalıştırmak için faydalıdır.
import os  # işletim sistemi ile etkileşimde bulunmak için kullanılır, örneğin, dosya ve dizin işlemleri.

# Kendi modüllerimiz
from analyze_with_port import analyze_and_save_vulnerabilities  # Açık portları analiz eder ve zayıflıkları raporlar.
from attack_simulation import simulate_attacks_from_vulnerability_report  # CVE raporlarından saldırı simülasyonları yapar.
from elevate_privileges import run_as_admin  # Yönetici ayrıcalıkları ile PowerShell scripti çalıştırır.
from file_manager import ensure_files_exist  # Gerekli log dosyalarının varlığını kontrol eder ve oluşturur.
from get_local_ip import get_local_ip  # Yerel IP adresini almak için kullanılır.
from vulnerability_protection import process_attack_log  # Saldırı simülasyonu loglarını işleyerek CVE bilgilerini alır ve raporlar.

# Logger yapılandırması
logger = logging.getLogger()  # Mevcut logger'ı al
logger.setLevel(logging.INFO)  # Log seviyesini INFO olarak ayarla, bu seviyenin üzerindeki tüm loglar kaydedilir.
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')  # Log formatını tanımla: zaman damgası, log seviyesi ve mesaj.

# Konsola log yazma
console_handler = logging.StreamHandler()  # Konsola log yazmak için bir handler oluştur.
console_handler.setFormatter(formatter)  # Handler'ın formatını ayarla.
logger.addHandler(console_handler)  # Logger'a handler'ı ekle.

class GuiHandler(logging.Handler):
    """
    Log kayıtlarını GUI'de göstermek için özel bir logger sınıfı.
    Bu sınıf, logging.Handler sınıfından türetilmiştir ve log mesajlarını
    bir Tkinter text widget'ı içinde gösterir.
    """

    def __init__(self, text_widget):
        """
        GuiHandler sınıfının kurucusu (constructor) methodu.
        text_widget: Log kayıtlarının gösterileceği tkinter Text widget'ı.
        """
        super().__init__()  # logging.Handler sınıfının init methodunu çağırır
        self.text_widget = text_widget  # text_widget, logların yazılacağı GUI bileşeni

    def emit(self, record):
        """
        Bu method, bir log kaydı geldiğinde çalıştırılır.
        Log kaydını formatlar ve GUI'deki text_widget içine ekler.
        Ayrıca, eğer log kaydı "İşlem Sonuçlandı." mesajını içeriyorsa,
        bir GUI güncellemesi yaparak butonları etkinleştirir.
        """
        log_entry = self.format(record)  # Log kaydını belirtilen formatta stringe çevirir
        self.text_widget.insert(tk.END, log_entry + '\n')  # Log kaydını text_widget'ın sonuna ekler
        self.text_widget.yview(tk.END)  # Text widget'ı otomatik olarak en son satıra kaydırır
        # Log kaydında 'İşlem Sonuçlandı.' ifadesi varsa, butonları etkinleştir
        if "İşlem Sonuçlandı." in log_entry:
            app.root.after(0, enable_buttons)  # GUI ana döngüsü içinde butonları etkinleştirir
# GUI log handler'ı oluşturuluyor
gui_handler = GuiHandler(None)  # Handler oluşturulurken bir text_widget geçici olarak None atanıyor
gui_handler.setFormatter(formatter)  # Formatter ayarlanıyor; bu, logların nasıl formatlanacağını belirler
logger.addHandler(gui_handler)  # Oluşturulan handler, logger'a ekleniyor

def run_main_process():
    """
    Ana işlemleri yürüten fonksiyon:
    - Gerekli log dosyalarının varlığını kontrol eder ve yoksa oluşturur.
    - Yönetici ayrıcalıkları ile ana PowerShell scriptini çalıştırır.
    - Yerel IP adresini alır ve bu IP üzerinde açık portları analiz eder.
    - CVE (Common Vulnerabilities and Exposures) analizleri yapar ve bu analizlere dayanarak saldırı simülasyonları gerçekleştirir.
    - Tüm sonuçları ilgili log dosyalarına yazar ve işlemin tamamlandığını bildirir.
    """
    try:
        # Log dosyaları için gerekli dosyaların listesi
        file_list = ['analyze_with_port.log', 'attack_simulation.log',
                     'elevate_privileges.log', 'vulnerability_protection.log']
        # Gerekli dosyaların varlığını kontrol et ve eksik olanları oluştur.
        ensure_files_exist(file_list)
        time.sleep(
            1)  # 1 saniye bekle; dosyaların oluşturulması veya erişime hazır hale gelmesi için

        # Ana işlemi yönetici ayrıcalıklarıyla çalıştır.
        run_as_admin('main.py')  # 'main.py' dosyasını yönetici yetkileri ile çalıştırır.
        time.sleep(1)  # 1 saniye bekle; işlem yüklenme süreleri için

        # İşlem başladığına dair bir bilgi log kaydı oluştur.
        logger.info('İşlem Başlatılıyor..')

        # Yerel IP adresini al
        local_ip = get_local_ip()  # Yerel ağ IP adresini elde eder.
        if local_ip:  # Eğer geçerli bir IP adresi alındıysa
            # Yerel IP ile açık portları analiz et ve zayıflıkları kaydet.
            analyze_and_save_vulnerabilities(local_ip)

            # CVE raporlarına dayanarak saldırı simülasyonu yap.
            simulate_attacks_from_vulnerability_report('log/analyze_with_port.log')

            # CVE bilgilerini al ve işleme başla.
            logger.info("Başlatılıyor: CVE bilgiler alınıyor...")

            # Saldırı simülasyonu sonuçlarını log dosyasına işle.
            process_attack_log('log/attack_simulation.log')

            # Analiz sonuçlarının kaydedildiğini bildir.
            logger.info("Analiz sonuçları log/vulnerability_protection.log dosyasına kaydedildi.")
            # Tüm işlemler tamamlandığında bilgi mesajı gönder.
            logger.info('İşlem Sonuçlandı.')
        else:
            # Eğer yerel IP adresi alınamazsa, hata mesajı gönder.
            logger.error("Yerel IP adresi alınamadı.")
    except Exception as e:
        # Herhangi bir hata oluştuğunda, hata mesajı ve hata detaylarını logla.
        logger.error(f"Bir hata oluştu: {e}")
def start_process():
    """
    Ana işlemi bir iş parçacığında başlatır ve GUI düğmelerini devre dışı bırakır.
    """
    gui_handler.text_widget = app.log_output  # Log handler'ı GUI log çıkış alanına yönlendir.
    app.start_button.config(state=tk.DISABLED)  # İşlemi başlat düğmesini devre dışı bırak.
    app.log_button.config(state=tk.DISABLED)  # Logları gör düğmesini devre dışı bırak.
    app.loading_animation.start()  # Yüklenme animasyonunu başlat
    thread = Thread(target=run_main_process)  # Ana işlemi bir iş parçacığında çalıştır.
    thread.start()
def enable_buttons():
    """
    İşlem tamamlandığında GUI düğmelerini tekrar etkinleştirir.
    """
    app.start_button.config(state=tk.NORMAL)  # İşlemi başlat düğmesini etkinleştir.
    app.log_button.config(state=tk.NORMAL)  # Logları gör düğmesini etkinleştir.
    app.loading_animation.stop()  # Yüklenme animasyonunu durdur

class FlatButton(tk.Button):
    """
    Özelleştirilmiş görünüme sahip düz buton sınıfı. Bu sınıf, tkinter'in Button sınıfını genişleterek
    butonun görünümünü özelleştirir. Örneğin, butonun arka plan rengi, yazı rengi, yazı tipi ve
    butonun kenar detayları gibi özellikler ayarlanabilir.
    """
    def __init__(self, parent, text, command=None, **kwargs):
        """
        Düz buton sınıfının başlatıcı metodudur. Bu metod, butonun temel özelliklerini ayarlar
        ve tkinter'in Button sınıfının __init__ metodunu çağırır.

        Parametreler:
        - parent: Bu butonun yerleştirileceği üst widget (örneğin, bir pencere veya bir çerçeve).
        - text: Butonun üzerindeki yazı.
        - command: Butona tıklandığında çağrılacak olan fonksiyon. Varsayılan olarak None.
        - **kwargs: tkinter Button sınıfının diğer seçenekleri için ek argümanlar.

        Butonun görsel özellikleri şu şekilde ayarlanır:
        - Arka plan rengi (#0066cc).
        - Yazı rengi (#ffffff).
        - Yazı tipi (Arial, 14 punto, kalın).
        - Kenar görünümü (FLAT).
        """
        super().__init__(parent, text=text, command=command, bg='#0066cc', fg='#ffffff',
                         font=("Arial", 14, "bold"), relief=tk.FLAT, **kwargs)  # Butonun görünümünü ayarla.
class FlatLoadingBar(tk.Canvas):
    """
    Yüklenme animasyonu için özel bir bar sınıfı. Bu sınıf, tkinter'in Canvas sınıfını genişleterek
    yüklenme animasyonu için bir bar oluşturur. Bar, belirli bir renk ve boyutlarda çizilir ve
    animasyon sırasında genişler.

    Özellikler:
    - x, y: Bar'ın başlangıç koordinatları.
    - width, height: Bar'ın genişliği ve yüksekliği.
    - color: Bar'ın rengini belirler.
    - background_color: Bar'ın arka plan rengini belirler.
    - bar: Animasyon barının referansı.
    - running: Animasyonun devam edip etmediğini belirler.
    - progress: Animasyonun mevcut ilerleme durumunu belirler.
    """
    def __init__(self, parent, x, y, width, height, color=None, background_color=None):
        """
        Yüklenme barı sınıfının başlatıcı metodudur. Bu metod, barın temel özelliklerini ayarlar
        ve tkinter'in Canvas sınıfının __init__ metodunu çağırır.

        Parametreler:
        - parent: Bar'ın yerleştirileceği üst widget (örneğin, bir pencere veya bir çerçeve).
        - x, y: Bar'ın başlangıç koordinatları.
        - width: Bar'ın genişliği.
        - height: Bar'ın yüksekliği.
        - color: Bar'ın rengini belirler.
        - background_color: Bar'ın arka plan rengini belirler.

        Bar, başlangıçta bir dikdörtgen olarak çizilir ve animasyon sırasında bu dikdörtgenin
        boyutu değişir.
        """
        super().__init__(parent, width=width, height=height, bg=background_color, highlightthickness=0)
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.color = color
        self.background_color = background_color
        self.bar = None
        self.running = False
        self.progress = 0
        self.create_rectangle(self.x, self.y, self.width, self.height, outline='#004d99', width=2) # Yükleme çubuğunu
        # oluştur

    def start(self):
        """
        Yüklenme animasyonunu başlatır. Animasyon başlatılmadan önce, bar'ın ilerleme durumu sıfırlanır
        ve animasyon fonksiyonu çağrılır.
        """
        if not self.running:
            self.running = True
            self.progress = 0
            self.animate()  # Animasyonu başlat.

    def stop(self):
        """
        Yüklenme animasyonunu durdurur ve tamamlanmış bir bar gösterir. Animasyon durdurulur ve mevcut
        animasyon barı silinir. Bar, tamamlanmış durumunu gösterecek şekilde yeniden çizilir.
        """
        self.running = False
        self.delete(self.bar)  # Animasyon barını sil.
        self.create_rectangle(self.x, self.y, self.width, self.height, fill=self.color, outline=self.color)  # Tamamlanmış barı oluştur.

    def animate(self):
        """
        Yüklenme animasyonunu çalıştırır. Eğer animasyon devam ediyorsa, bar'ın uzunluğu döngüsel olarak
        artırılır ve yeni bir bar oluşturulur. Animasyon, her 50 milisaniyede bir tekrar çağrılır.
        """
        if self.running:
            self.delete(self.bar)  # Önceki barı sil.
            self.progress = (self.progress + 5) % (self.width + 10)  # Bar'ın uzunluğunu döngüsel olarak artır.
            self.bar = self.create_rectangle(self.x, self.y, self.x + self.progress, self.y + self.height,
                                             fill=self.color, outline=self.color)  # Yeni barı oluştur.
            self.update()
            self.after(50, self.animate)  # 50 ms'de bir animate fonksiyonunu tekrar çağır.
class App:
    """
    Uygulamanın GUI'sini oluşturan ve yöneten ana sınıf. Bu sınıf, tkinter kullanarak
    bir pencere ve çeşitli bileşenler (butonlar, etiketler, paneller) oluşturur ve yönetir.
    Ayrıca, bazı işlevlerin (örneğin, log görüntüleme ve işlem başlatma) kontrolünü sağlar.
    """
    def __init__(self, root):
        """
        App sınıfının başlatıcı metodudur. Bu metod, ana pencereyi başlatır, başlık ve boyut ayarlarını yapar
        ve GUI bileşenlerini oluşturur.

        Parametreler:
        - root: Uygulamanın ana penceresi.
        """
        self.root = root
        self.root.title("Automatic Security Vulnerability Management Systems")  # Pencerenin başlığını ayarla.
        self.root.geometry("1300x700")  # Pencerenin boyutlarını ayarla.
        self.root.configure(bg="#2e2e2e")  # Pencerenin arka plan rengini ayarla.

        self.create_widgets()  # GUI bileşenlerini oluştur.
        self.initialize_log_button()  # Log düğmesini başlat.

    def create_widgets(self):
        """
        GUI bileşenlerini oluşturur ve düzenler. Bu metod, başlık etiketi, sol panel, sağ panel gibi
        çeşitli bileşenleri oluşturur ve yerleştirir.
        """
        # Başlık etiketi
        title_label = tk.Label(self.root, text="Automatic Security Vulnerability Management Systems\n(Otomatik "
                                               "Güvenlik Açığı Yönetim Sistemleri)",
                               font=("Arial", 24, "bold"), fg="#00BFFF", bg="#2e2e2e")
        title_label.pack(pady=20)  # Başlık etiketini pencereye ekle.

        # Sol panel
        left_panel = tk.Frame(self.root, bg="#1e1e1e", width=300)
        left_panel.pack(side=tk.LEFT, fill=tk.Y)  # Sol paneli pencereye ekle ve dikey olarak doldur.

        # İşlemi başlat düğmesi
        self.start_button = FlatButton(left_panel, text="İşlemi Başlat", command=start_process)
        self.start_button.pack(pady=20, padx=10, fill=tk.X)  # Düğmeyi sol panelde yerleştir.

        # Logları gör düğmesi
        self.log_button = FlatButton(left_panel, text="Logları Gör", command=self.open_log)
        self.log_button.pack(pady=10, padx=10, fill=tk.X)  # Log düğmesini sol panelde yerleştir.

        # Çıkış düğmesi
        exit_button = FlatButton(left_panel, text="Çıkış", command=self.confirm_exit)
        exit_button.pack(pady=10, padx=10, fill=tk.X)  # Çıkış düğmesini sol panelde yerleştir.

        # Sağ panel
        right_panel = tk.Frame(self.root, bg="#1e1e1e")
        right_panel.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)  # Sağ paneli pencereye ekle ve genişlemesini sağla.

        # Log çıkış alanı

        self.log_output = scrolledtext.ScrolledText(right_panel, width=80, height=25, wrap=tk.WORD,
                                                    bg="#1e1e1e", fg="#B0B0B0", insertbackground='white',
                                                    font=("Courier", 12))
        self.log_output.pack(padx=20, pady=20, fill=tk.BOTH, expand=True)  # Log alanını sağ panelde yerleştir.

        # Yüklenme animasyonu
        self.loading_animation = FlatLoadingBar(right_panel, 15, 15, 800, 30, color='#0066cc',
                                                background_color='#1e1e1e')
        self.loading_animation.pack(pady=20)  # Yüklenme animasyonunu sağ panelde yerleştir.

    def initialize_log_button(self):
        """
        Log düğmesini başlatma işleminden önce devre dışı bırakır ve 7 dakika sonra tekrar etkinleştirir.
        Bu metod, log düğmesini başlangıçta devre dışı bırakır ve 7 dakika sonra yeniden etkinleştirir.
        """
        self.log_button.config(state=tk.DISABLED)  # Log düğmesini devre dışı bırak.
        self.root.after(420000, lambda: self.log_button.config(state=tk.NORMAL))  # 7 dakika (420000 ms) sonra
        # düğmeyi etkinleştir.

    def open_log(self):
        """
        Logları görüntülemek için işlemi başlatır. Eğer işlem düğmesi etkinse, mevcut logları kontrol eder.
        Aksi takdirde, log dosyalarını açar.
        """
        if self.start_button.cget("state") == tk.NORMAL:
            self.check_log_and_enable_buttons()  # Mevcut logları kontrol et ve butonları etkinleştir.
        else:
            self.open_log_file()  # Log dosyalarını aç.

    def check_log_and_enable_buttons(self):
        """
        Mevcut logları kontrol eder ve butonları etkinleştirir. Kullanıcıdan logları okuyup okumadığını sorar.
        Logları okuduyorsa uygulamayı kapatır, aksi takdirde log dosyalarını açar.
        """
        response = messagebox.askyesno("Log Kontrolü", "Mevcut logları okudunuz mu?")
        if response:
            self.root.quit()  # Logları okudunuzsa uygulamayı kapat.
        else:
            self.open_log_file()  # Logları aç.

    def open_log_file(self):
        """
        Log dosyalarını seçmek ve görüntülemek için yeni bir pencere açar. Bu metod, mevcut log dosyalarını
        listeler ve kullanıcıya seçme imkanı tanır. Seçilen dosyanın içeriğini görüntüler.
        """
        log_files = [f for f in os.listdir('log') if f.endswith('.log')]  # 'log' dizinindeki log dosyalarını listele.
        log_files.sort()  # Log dosyalarını sırala.

        if not log_files:
            messagebox.showinfo("Bilgi", "Açılacak log dosyası bulunamadı.")  # Log dosyası bulunamazsa bilgi mesajı göster.
            return

        log_frame = tk.Toplevel(self.root)  # Yeni bir pencere oluştur.
        log_frame.title("Log Dosyaları")  # Pencerenin başlığını ayarla.
        log_frame.geometry("800x600")  # Pencerenin boyutlarını ayarla.
        log_frame.configure(bg="#2e2e2e")  # Pencerenin arka plan rengini ayarla.

        combo_box = ttk.Combobox(log_frame, values=log_files, state="readonly")  # Log dosyalarını seçmek için bir combobox oluştur.
        combo_box.set(log_files[0])  # İlk log dosyasını varsayılan olarak seç.
        combo_box.pack(pady=20, padx=20, fill=tk.X)  # Combobox'u pencereye ekle.

        log_content = scrolledtext.ScrolledText(log_frame, width=80, height=20, wrap=tk.WORD,
                                                bg="#1e1e1e", fg="#B0B0B0", insertbackground='white',
                                                font=("Courier", 12))  # Log içeriğini görüntülemek için kaydırılabilir metin alanı oluştur.
        log_content.pack(pady=20, padx=20, fill=tk.BOTH, expand=True)  # Metin alanını pencereye ekle ve genişlet.
        log_content.config(state=tk.DISABLED)  # Başlangıçta metin alanını sadece okunur yap.

        def on_log_file_selected(event):
            """
            Seçilen log dosyasının içeriğini görüntülemek için çağrılır. Bu metod, seçilen dosyanın içeriğini
            okuyup metin alanına ekler.
            """
            file_name = combo_box.get()  # Seçilen log dosyasının adını al.
            with open(os.path.join('log', file_name), 'r', encoding='utf-8') as file:
                content = file.read()  # Dosya içeriğini oku.
            log_content.config(state=tk.NORMAL)  # Metin alanını düzenlenebilir yap.
            log_content.delete(1.0, tk.END)  # Mevcut içeriği sil.
            log_content.insert(tk.END, content)  # Yeni içeriği ekle.
            log_content.config(state=tk.DISABLED)  # Metin alanını tekrar sadece okunur yap.

        combo_box.bind("<<ComboboxSelected>>", on_log_file_selected)  # Log dosyası seçildiğinde içerik gösterimi için callback bağla.
        on_log_file_selected(None)  # İlk dosyayı yükle.

    def confirm_exit(self):
        """
        Uygulamayı kapatma onayı alır. İşlem durumuna göre kullanıcıya çıkış onayı sorar.
        """
        if self.start_button.cget("state") == tk.DISABLED:
            response = messagebox.askyesno("Çıkış", "İşlem devam etmekte. Yine de çıkmak istiyor musunuz?")
            if response:
                self.root.quit()  # İşlem devam ederken çıkmak istiyorsa uygulamayı kapat.
        elif self.start_button.cget("state") == tk.NORMAL:
            response = messagebox.askyesno("Çıkış", "Hiçbir işlem bulunmamakta. Çıkmak istediğinizden emin misiniz?")
            if response:
                self.root.quit()  # İşlem yoksa çıkmak istiyorsa uygulamayı kapat.
        else:
            response = messagebox.askyesno("Çıkış", "İşlem sonuçlandı. Log dosyalarınızı kontrol ettiniz mi?")
            if response:
                self.root.quit()  # İşlem tamamlandıysa ve loglar kontrol edildiyse uygulamayı kapat.

# GUI başlat
root = tk.Tk()  # Tkinter kullanarak ana GUI penceresini başlat. Bu tkinter uygulamanızın temel pencere nesnesidir.

app = App(root)  # App sınıfından bir nesne oluştur ve 'root' penceresini bu nesneye aktar. Bu adımda GUI bileşenleri ve uygulama mantığı başlatılır.

root.mainloop()  # Bu metod, GUI'nin kullanıcı etkileşimlerini işleyebilmesi ve sürekli olarak güncellenebilmesi için gerekli olan ana döngüyü başlatır.

