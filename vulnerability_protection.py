# vulnerability_protection.py
# Bu modül, bir log dosyasını tarayarak CVE bilgilerini toplar ve NVD API'sinden bu CVE'ler hakkında veri alarak başka bir log dosyasına yazar.

import re  # Düzenli ifadelerle metin işleme yapmak için kullanılır.
import logging  # Loglama yapmak için kullanılır.
import time  # Zaman gecikmeleri eklemek için kullanılır.
import requests  # HTTP istekleri yapmak için kullanılır.
from json import JSONDecodeError  # JSON verilerini ayrıştırırken oluşabilecek hataları yakalamak için kullanılır.
from requests import RequestException  # HTTP isteklerinde oluşabilecek hataları yakalamak için kullanılır.
from apiUrl.api_url import API_URL  # API URL'leri ve API anahtarlarını almak için özel bir modülden içe aktarılır.

# NVD API anahtarınızı ve URL'sini almak için bir API URL sınıfı kullanılır.
api_url = API_URL()
NVD_API_KEY = api_url.get_NVD_API_KEY()  # API anahtarını API_URL sınıfından alır.
NVD_API_URL = api_url.get_NVD_API_URL()  # API URL'sini API_URL sınıfından alır.

# vulnerability_protection için özel bir logger oluşturun.
vulnerability_protection = logging.getLogger('vulnerability_protection')
vulnerability_protection.setLevel(logging.INFO)  # Logger'ı bilgi seviyesinde çalışacak şekilde ayarlar.

# Herhangi bir önceki handler'ı temizler.
if vulnerability_protection.hasHandlers():
    vulnerability_protection.handlers.clear()

# Loglama için dosya handler'ı oluşturur.
file_handler = logging.FileHandler('log/vulnerability_protection.log', encoding='utf-8')
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))  # Log formatını belirler.
vulnerability_protection.addHandler(file_handler)  # Dosya handler'ını logger'a ekler.


def fetch_cve_data(cve_id):
    """
    Verilen CVE kimliğine sahip CVE verilerini NVD API'sinden alır ve log dosyasına yazar.

    Parameters:
    cve_id (str): CVE kimliği (ör. 'CVE-2024-3123')

    Returns:
    list: CVE verilerini içeren formatlanmış log girişlerinin bir listesi
    """
    url = f"{NVD_API_URL}?cveId={cve_id}"  # API URL'sini CVE kimliğiyle birleştirir.
    headers = {'Authorization': f'Token {NVD_API_KEY}'}  # Yetkilendirme için gerekli başlıkları ayarlar.
    time.sleep(1)  # API çağrıları arasında gecikme ekler.

    try:
        response = requests.get(url=url, headers=headers)  # HTTP GET isteği gönderir.
        response.raise_for_status()  # HTTP hatalarını yakalar.

        try:
            data = response.json()  # Yanıtı JSON formatında ayrıştırır.
        except JSONDecodeError as e:
            vulnerability_protection.error(
                f"Yanıtın ayrıştırılması başarısız oldu: {e}")  # JSON ayrıştırma hatasını loglar.
            return None

        # Eğer 'vulnerabilities' anahtarı mevcut değilse hata kaydeder.
        if "vulnerabilities" not in data:
            vulnerability_protection.error("Geçersiz veri yapısı: 'vulnerabilities' anahtarı bulunamadı.")
            return None

        # CVE verilerini işlemek için bir liste oluşturur.
        formatted_logs = []
        for vulnerability in data["vulnerabilities"]:
            cve_id = vulnerability['cve']['id']
            published_date = vulnerability['cve']['published']
            last_modified_date = vulnerability['cve']['lastModified']
            description = vulnerability['cve']['descriptions'][0]['value'] if vulnerability['cve'][
                'descriptions'] else 'Açıklama bulunamadı.'

            # CVSS metriği ve diğer bilgileri alır.
            cvss_type = ''
            cvss_score = 'Bilgi Yok'
            cvss_severity = 'Bilgi Yok'
            cvss_attackVector = 'Bilgi Yok'

            # CVSS metriklerini al
            metrics = vulnerability.get('cve', {}).get('metrics', {})

            # Metrikleri kontrol et ve uygun bilgileri al
            match metrics:
                case metrics if 'cvssMetricV2' in metrics:
                    cvss_type = 'cvssMetricV2'
                    metric_list = metrics['cvssMetricV2']
                    if metric_list:
                        metric = metric_list[0]
                        cvss_score = metric.get('cvssData', {}).get('baseScore', 'Bilgi Yok')
                        cvss_severity = metric.get('cvssData', {}).get('baseSeverity', 'Bilgi Yok')
                        cvss_attackVector = metric.get('cvssData', {}).get('attackVector', 'Bilgi Yok')

                case metrics if 'cvssMetricV3' in metrics:
                    cvss_type = 'cvssMetricV3'
                    metric_list = metrics['cvssMetricV3']
                    if metric_list:
                        metric = metric_list[0]
                        cvss_score = metric.get('cvssData', {}).get('baseScore', 'Bilgi Yok')
                        cvss_severity = metric.get('cvssData', {}).get('baseSeverity', 'Bilgi Yok')
                        cvss_attackVector = metric.get('cvssData', {}).get('attackVector', 'Bilgi Yok')

                case metrics if 'cvssMetricV31' in metrics:
                    cvss_type = 'cvssMetricV31'
                    metric_list = metrics['cvssMetricV31']
                    if metric_list:
                        metric = metric_list[0]
                        cvss_score = metric.get('cvssData', {}).get('baseScore', 'Bilgi Yok')
                        cvss_severity = metric.get('cvssData', {}).get('baseSeverity', 'Bilgi Yok')
                        cvss_attackVector = metric.get('cvssData', {}).get('attackVector', 'Bilgi Yok')

                case metrics if 'cvssMetricV4' in metrics:
                    cvss_type = 'cvssMetricV4'
                    metric_list = metrics['cvssMetricV4']
                    if metric_list:
                        metric = metric_list[0]
                        cvss_score = metric.get('cvssData', {}).get('baseScore', 'Bilgi Yok')
                        cvss_severity = metric.get('cvssData', {}).get('baseSeverity', 'Bilgi Yok')
                        cvss_attackVector = metric.get('cvssData', {}).get('attackVector', 'Bilgi Yok')

            # Zayıflık bilgilerini alır.
            weaknesses = 'Zayıflık bulunamadı.'
            if 'weaknesses' in vulnerability['cve']:
                weaknesses = vulnerability['cve']['weaknesses'][0]['description'][0]['value']

            # Referans bilgilerini alır.
            references = 'Referans bulunamadı.'
            if 'references' in vulnerability['cve']:
                ref_list = vulnerability['cve']['references']
                ref_urls = [ref.get('url', '') for ref in ref_list[-3:]]  # Son 3 referansı alır.
                references = '\n'.join(ref_urls) if ref_urls else 'Referans bulunamadı.'

            # Formatlanmış log girdisini oluşturur.
            formatted_log = (
                f"CVE Kimliği: {cve_id}\n"
                f"Yayınlanma Tarihi: {published_date}\n"
                f"Son Değişiklik Tarihi: {last_modified_date}\n"
                f"Açıklamalar:\n\ten: {description}\n"
                f"Metrikler:\n\t{cvss_type} Puanı: {cvss_score}\n"
                f"\t{cvss_type} Ciddiyeti: {cvss_severity}\n"
                f"\tHedef: {cvss_attackVector}\n"
                f"Zayıflıklar:\n\ten: {weaknesses}\n\n"
                f"Referanslar:\n\t{references}\n"
            )

            formatted_logs.append(formatted_log)  # Formatlanmış log girdisini listeye ekler.

        return formatted_logs  # Formatlanmış log girdilerini döndürür.

    except RequestException as e:
        vulnerability_protection.error(
            f"İstek gönderilirken bir hata oluştu: {e}")  # İstek sırasında oluşan hatayı loglar.
        return None


def process_attack_log(log_file):
    """
    attack_simulation.log dosyasını okur, CVE verilerini toplar ve `vulnerability_protection.log` dosyasına yazar.

    Parameter:
    log_file (str): İşlenecek log dosyasının adı
    """
    try:
        with open(log_file, 'r', encoding='utf-8') as file:
            lines = file.readlines()  # Log dosyasını satır satır okur.

        # Sonuçları saklayacak bir liste oluşturur.
        results = []

        # Satırları tarayarak CVE bilgilerini ve ilgili servis/port bilgilerini toplar.
        for i, line in enumerate(lines):
            line = line.strip()  # Boşlukları temizler.
            if not line:
                continue

            # CVE numaralarını bulur.
            if 'CVE-' in line:
                cve_match = re.search(r'CVE-\d{4}-\d+', line)
                if cve_match:
                    cve_id = cve_match.group(0)
                    # CVE verilerini alır.
                    cve_logs = fetch_cve_data(cve_id)
                    if cve_logs:
                        results.extend(cve_logs)

            # "[WARNING]" ifadesi ile karşılaşılırsa, bir önceki satırı log dosyasına ekler.
            if '[WARNING] Potential vulnerability detected!' in line:
                previous_line = lines[i - 1].strip() if i > 0 else ''
                warning_log = f"{previous_line}\n"
                vulnerability_protection.info(warning_log)

        # Sonuçları log dosyasına yazar.
        for log_entry in results:
            time.sleep(1)  # Yazma işlemi sırasında gecikme ekler.
            vulnerability_protection.info(log_entry)

    except FileNotFoundError:
        vulnerability_protection.error(f"File {log_file} not found.")  # Dosya bulunamadığında hatayı loglar.
    except IOError as io_err:
        vulnerability_protection.error(f"IO error occurred: {io_err}")  # G/Ç hatasını loglar.
    except Exception as err:
        vulnerability_protection.error(f"An unexpected error occurred: {err}")  # Beklenmeyen hataları loglar.
