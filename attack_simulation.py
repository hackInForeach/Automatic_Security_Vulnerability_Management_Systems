
#attack_simulation.py

# Python'un logging modülü, uygulama içinde oluşan olayların (logların) kaydedilmesi için kullanılır.
# Loglama, hata ayıklama, performans takibi ve sistem izleme gibi durumlarda oldukça yararlıdır.
import logging

# Python'un subprocess modülü, harici komutları çalıştırmak ve bu komutların çıktılarını işlemek için kullanılır.
# Bu modül, başka programları çağırma, betikleri çalıştırma ve sistem komutlarını yürütme gibi işlemleri yapmamızı sağlar.
import subprocess

def perform_dynamic_attack_simulation(port, service_name, target_ip):
    """
    PowerShell kullanarak dinamik saldırı simülasyonu gerçekleştirir.

    Bu fonksiyon, hedeflenen bir IP adresi ve port üzerinde belirli bir hizmet için dinamik bir saldırı
    simülasyonu gerçekleştirir. PowerShell aracılığıyla Nmap komutu kullanarak hedefteki port ve servis
    üzerinde potansiyel güvenlik açıklarını tarar. Tarama sonuçları daha sonra log dosyasına yazılır.

    Args:
        port (str): Hedef port numarası. Bu, üzerinde saldırı simülasyonu yapılacak olan port numarasıdır.
        service_name (str): Hedef servisin adı. Bu, taranacak servisin adıdır.
        target_ip (str): Hedef IP adresi. Bu, üzerinde tarama yapılacak olan cihazın IP adresidir.

    İşleyiş:
    1. Fonksiyon, verilen hedef IP, port ve servis adı ile bir saldırı simülasyonu başlatır.
    2. PowerShell kullanarak Nmap komutunu çalıştırır ve belirli bir portta hangi servislerin çalıştığını
       ve bu servislerin bilinen güvenlik açıkları olup olmadığını kontrol eder.
    3. Çıktı başarıyla alındığında, PORT, STATE, SERVICE ve VERSION bilgilerini ayıklar.
    4. Eğer potansiyel güvenlik açıkları bulunursa, bunlar da süzülerek log dosyasına yazılır.
    5. Eğer Nmap komutu başarısız olursa, hata mesajları log dosyasına kaydedilir.
    6. Her bir rapor kaydının sonunda, okunabilirliği artırmak amacıyla bir boş satır eklenir.
    """

    # Logger objesini alır
    logger2 = logging.getLogger()

    try:
        # Simülasyonun başladığını loglar
        logger2.info(f"Başlatılıyor: {target_ip}:{port}:{service_name} için saldırı simülasyonu gerçekleştiriliyor...")

        # PowerShell komutunu oluşturur, Nmap kullanarak belirli bir port ve hizmet üzerinde saldırı simülasyonu yapar
        command = f"powershell -Command \"nmap -sV --script vulners -p {port} {target_ip}\""

        # Komutu çalıştırır ve çıktıyı alır
        result = subprocess.run(command, shell=True, capture_output=True, text=True)

        # Komut başarılı ise
        if result.returncode == 0:
            output = result.stdout
            log_message = f"Nmap script executed successfully for service '{service_name}' on port {port}.\n"

            # PORT, STATE, SERVICE, VERSION bilgilerini ayıklar
            filtered_output = extract_service_info(output)
            if filtered_output:
                log_message += filtered_output + "\n"

            # Potansiyel zafiyetleri kontrol eder ve süzer
            relevant_vulnerabilities = extract_relevant_vulnerability_info(output)
            if relevant_vulnerabilities:
                log_message += "[WARNING] Potential vulnerability detected!\n"
                log_message += f"\nFiltered Output:\n{relevant_vulnerabilities}"
            else:
                log_message += "[INFO] No specific vulnerabilities detected."

        else:
            # Eğer komut başarısız olursa hata mesajını oluşturur
            log_message = f"Nmap script execution failed for service '{service_name}' on port {port}.\nError:\n{result.stderr}"

        # Log mesajını dosyaya yazar ve her rapordan sonra bir boş satır ekler
        write_log_to_file(log_message + "\n\n")

    except Exception as e:
        # Hata durumunda log mesajını oluşturur ve dosyaya yazar
        log_message = f"Nmap script execution error on port {port} for service '{service_name}': {e}"
        write_log_to_file(log_message + "\n\n")


def extract_service_info(output):
    """
    Nmap çıktısından PORT, STATE, SERVICE ve VERSION bilgilerini ayıklar.

    Bu fonksiyon, Nmap'in tarama çıktısından yalnızca belirli servis bilgilerini (PORT, STATE, SERVICE, VERSION)
    ayıklamak için kullanılır. Tarama sonucu, her port için durum bilgilerini içerir. Fonksiyon, bu bilgilere
    odaklanarak sadece ilgili satırları döndürür.

    Args:
        output (str): Nmap komutunun çıktısı. Bu, birden fazla satırdan oluşan ve her satırda farklı bilgi
                      içeren bir metin olabilir.

    Returns:
        str: PORT, STATE, SERVICE ve VERSION bilgilerini içeren satırları döndürür. Eğer ilgili bilgiler
             bulunamazsa `None` döndürülür. Dönen bilgi, birden fazla satırı içerebilir ve satırlar yeni
             satır karakteri (\n) ile ayrılmıştır.
    """

    # Nmap çıktısını satırlara böler
    lines = output.splitlines()
    service_info = []

    # Her bir satırı kontrol eder ve belirli anahtar kelimeleri içeren satırları seçer
    for line in lines:
        # "PORT" ile başlayan satır genellikle başlık satırıdır, bu satırı ekleriz
        if line.startswith("PORT"):
            service_info.append(line)
        # "open" anahtar kelimesini içeren satırlar, genellikle portun açık olduğunu belirten satırlardır
        elif any(keyword in line for keyword in ["open"]):
            service_info.append(line)

    # Seçilen satırları birleştirip döndürür, eğer hiçbir satır bulunamazsa None döndürür
    return "\n".join(service_info) if service_info else None


def extract_relevant_vulnerability_info(output):
    """
    Nmap çıktısından işe yarayan güvenlik açığı bilgilerini ayıklar.

    Bu fonksiyon, Nmap tarafından üretilen çıktıyı analiz eder ve belirli anahtar kelimelere
    dayanarak potansiyel güvenlik açıkları ile ilgili satırları ayıklar. Bu bilgiler, tarama
    raporları veya log dosyaları için önemlidir, çünkü kritik güvenlik açıkları hakkında bilgi sağlar.

    Args:
        output (str): Nmap komutunun çıktısı. Bu, tarama sonuçlarını içeren metin formatındaki bir stringtir.

    Returns:
        str: Anahtar kelimelere uygun olan satırların birleştirilmiş hali. Eğer işe yarar bilgi
        bulunmazsa, None döner.
    """

    relevant_lines = []  # Potansiyel olarak önemli olan bilgileri depolamak için bir liste.

    # Çıktıda aranacak anahtar kelimeler
    keywords = [
        "CVE",  # Bilinen zafiyetler için kullanılan 'Common Vulnerabilities and Exposures' kimliği.
        "VULNERABLE",  # Zafiyet içeren servisler için önemli bir kelime.
        "smb-vuln",  # SMB protokolüyle ilgili zafiyetler.
        "samba-vuln",  # Samba servisi ile ilgili zafiyetler.
        "Exploit",  # İstismar edilebilecek zafiyetler için kullanılan kelime.
        "Exploitable",  # İstismar edilebilir zafiyetler için kullanılan kelime.
        "VULNERABLE:",  # Zafiyet bildiren bir başka önemli kelime.
        "DOS",  # 'Denial of Service' (Hizmet Reddi) saldırıları için kullanılan kelime.
        "msf",  # Metasploit framework ile ilgili zafiyetler.
        "http-vuln",  # HTTP protokolü üzerinden zafiyetler.
        "nfs-vuln",  # NFS protokolü ile ilgili zafiyetler.
        "ftp-vuln",  # FTP protokolü ile ilgili zafiyetler.
        "cve-",  # CVE numaraları için küçük harflerle arama.
        "WPEX-ID",  # WordPress Exploit kimlik bilgisi.
        "*EXPLOIT*"  # İstismar edilebilir zafiyetleri vurgulayan kelime.
    ]

    # Nmap çıktısını satır satır kontrol eder
    for line in output.splitlines():
        # Eğer satırda herhangi bir anahtar kelime varsa, o satır relevant_lines listesine eklenir
        if any(keyword in line for keyword in keywords):
            relevant_lines.append(line)

    # Eğer işe yarar satırlar bulunduysa bunları birleştirerek döndürür, aksi takdirde None döner
    return "\n".join(relevant_lines) if relevant_lines else None


def simulate_attacks_from_vulnerability_report(file_path):
    """
    Belirtilen dosyadan güvenlik açığı raporunu okuyarak dinamik saldırı simülasyonu yapar.

    Bu fonksiyon, bir dosyada bulunan güvenlik açığı raporunu satır satır okur ve her satırdaki
    bilgilere dayanarak ilgili hedefe dinamik bir saldırı simülasyonu başlatır. Herhangi bir hata
    durumunda, bu hatalar log dosyasına kaydedilir.

    Args:
        file_path (str): Güvenlik açığı raporunu içeren dosyanın yolu. Bu dosya, hedef IP adreslerini,
        port numaralarını, hizmet adlarını ve diğer gerekli bilgileri içeren satırlar içerir.
    """
    # Logger nesnesi oluşturulur, bu sayede programın ilerleyişi hakkında bilgi toplanabilir.
    logger2 = logging.getLogger()

    try:
        # Dosya belirtilen path'te açılır ve satır satır okunur.
        with open(file_path, 'r') as file:
            lines = file.readlines()  # Dosyadaki tüm satırlar okunur ve bir listeye kaydedilir.

            for line in lines:
                line = line.strip()  # Satırdaki gereksiz boşluklar temizlenir.
                if line:  # Satır boş değilse
                    parts = line.split(';')  # Satırdaki bilgiler ';' ile ayrılmıştır, bu yüzden parçalanır.

                    # Eğer satırda beklenen formatta bilgi varsa (IP, Port, Hizmet Adı gibi)
                    if len(parts) == 4:
                        target_ip = parts[0]  # IP adresi
                        port = parts[1]  # Port numarası
                        service_name = parts[3]  # Hizmet adı

                        # Log dosyasına bilgi yazdırılır, bu sayede yapılan işlemler izlenebilir.
                        log_message = f"Simülasyon başlatılıyor: IP {target_ip}, Port {port}, Hizmet {service_name}"
                        write_log_to_file(log_message)

                        # Saldırı simülasyonu fonksiyonu çağrılır
                        perform_dynamic_attack_simulation(port, service_name, target_ip)
                    else:
                        # Satır formatı beklenenden farklı ise bir hata mesajı loglanır.
                        log_message = f"Geçersiz satır formatı: {line}"
                        write_log_to_file(log_message)
    except FileNotFoundError:
        # Dosya belirtilen path'te bulunamazsa bu hata yakalanır ve log dosyasına yazılır.
        log_message = f"Dosya bulunamadı: {file_path}"
        write_log_to_file(log_message)
    except Exception as e:
        # Diğer olası hatalar yakalanır ve hata mesajı log dosyasına yazılır.
        log_message = f"Dosya okuma hatası: {e}"
        write_log_to_file(log_message)


def write_log_to_file(log_message):
    """
    Log mesajını 'attack_simulation.log' dosyasına yazar.

    Bu fonksiyon, gelen log mesajlarını belirtilen log dosyasına yazar. Bu sayede programın
    çalışması sırasında oluşan tüm olaylar ve hatalar kaydedilir ve gerektiğinde analiz edilebilir.

    Args:
        log_message (str): Log dosyasına yazılacak mesaj. Bu mesaj, programın çalışması sırasında
        oluşan olaylar veya hatalar hakkında bilgi içerir.
    """
    with open('log/attack_simulation.log', 'a', encoding='utf-8') as f:
        # Log mesajı dosyaya eklenir ve her mesajdan sonra bir boş satır eklenir.
        f.write(log_message + '\n\n')


