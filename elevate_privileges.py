
#elevate_privileges.py

import logging  # Programın çalışması sırasında meydana gelen olayları kaydetmek için kullanılır.
import ctypes   # C ile yazılmış işlevlere erişim sağlar, özellikle Windows API'lerini kullanmak için kullanılır.
import sys      # Python yorumlayıcısıyla etkileşim kurmak için kullanılır, örneğin komut satırı argümanlarını almak veya programı sonlandırmak için.

# Sadece elevate_privileges.py dosyası için özel bir logger oluştur.
# Bu logger, programın yönetici haklarıyla ilgili işlemlerini izlemek ve kaydetmek için kullanılır.
elevate_logger = logging.getLogger('elevate_privileges')
elevate_logger.setLevel(logging.INFO)  # Logger'ın bilgi seviyesinde çalışmasını ayarla.
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')  # Log formatını tanımla.
file_handler = logging.FileHandler('log/elevate_privileges.log', encoding='utf-8')  # Logları dosyaya yazmak için bir dosya işlemi oluştur.
file_handler.setFormatter(formatter)  # Dosya işlemine formatı uygula.
elevate_logger.addHandler(file_handler)  # Logger'a dosya işlemini ekle.

def run_as_admin(script_path):
    """
    Programı yönetici haklarıyla yeniden başlatır. Eğer program zaten yönetici haklarıyla çalışıyorsa,
    bu durumda yeniden başlatma işlemi yapılmaz. Aksi takdirde, program yönetici haklarıyla yeniden başlatılır.
    """
    elevate_logger.info("Bypass işlemi başlatılıyor...")  # İşlemin başladığını logla.
    try:
        if not is_admin():
            # Eğer program yönetici haklarıyla çalışmıyorsa, yeniden başlatılacağını logla ve yönetici haklarıyla yeniden başlat.
            elevate_logger.info("Yönetici hakları gerekmektedir, program yeniden başlatılıyor...")
            ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, f'"{script_path}"', None, 1)
            sys.exit()  # Programın mevcut örneğini sonlandır.
        else:
            # Eğer program zaten yönetici haklarıyla çalışıyorsa, bu durumu logla.
            elevate_logger.info("Program yönetici haklarıyla çalışıyor.")
    except Exception as e:
        # Herhangi bir hata durumunda hatayı logla ve programı sonlandır.
        elevate_logger.error(f"Yönetici hakları ile yeniden başlatma sırasında hata oluştu: {e}")
        sys.exit(1)

def is_admin():
    """
    Kullanıcının yönetici olup olmadığını kontrol eder.
    Eğer kullanıcı yönetici ise True, değilse False döner.
    """
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False  # Eğer herhangi bir hata oluşursa, yönetici olunmadığı varsayılır.
